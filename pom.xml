<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.bjh</groupId>
	<artifactId>exam</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>pom</packaging>

	<name>exam</name>
	<description>PG6100 - Exam Root</description>

	<modules>
		<module>backend</module>
	</modules>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.0.6.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<developers>
		<developer>
			<id>hakonschutt</id>
			<name>Håkon Schutt</name>
			<email>hakon@schutt.no</email>
			<url>github.com/hakonschutt</url>
			<roles>
				<role>developer</role>
			</roles>
		</developer>
		<developer>
			<id>kleppa</id>
			<name>Jarand Waage Kleppa</name>
			<email>jarandwaagekleppa@gmail.com</email>
			<url>github.com/kleppa</url>
			<roles>
				<role>developer</role>
			</roles>
		</developer>
		<developer>
			<id>bjornosal</id>
			<name>Bjørn Olav Salvesen</name>
			<email>bjorn.olav.salvesen@gmail.com</email>
			<url>github.com/bjornosal</url>
			<roles>
				<role>developer</role>
			</roles>
		</developer>
	</developers>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<version.java>1.8</version.java>
		<junit.version>4.12</junit.version>
		<version.kotlin>1.2.50</version.kotlin>
		<version.resteasy>3.1.3.Final</version.resteasy>
		<version.springboot>2.0.3.RELEASE</version.springboot>
		<version.springcloud>Finchley.RELEASE</version.springcloud>
		<version.springfox>2.9.2</version.springfox>
		<version.jacoco>0.8.2</version.jacoco>
		<version.graphql-spring>4.2.0</version.graphql-spring>
		<kotlin.compiler.incremental>true</kotlin.compiler.incremental>
		<version.jackson>2.8.9</version.jackson>
		<version.spring-cloud-starter-netflix-hystrix>2.0.1.RELEASE</version.spring-cloud-starter-netflix-hystrix>

	</properties>

	<dependencies>
		<dependency>
			<groupId>org.jetbrains.kotlin</groupId>
			<artifactId>kotlin-stdlib</artifactId>
			<version>${kotlin.version}</version>
		</dependency>
		<dependency>
			<groupId>org.jetbrains.kotlin</groupId>
			<artifactId>kotlin-test-junit</artifactId>
			<version>${kotlin.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- Kotlin dependencies -->
		<dependency>
			<groupId>org.jetbrains.kotlin</groupId>
			<artifactId>kotlin-stdlib-jdk8</artifactId>
			<version>${version.kotlin}</version>
		</dependency>
		<dependency>
			<groupId>org.jetbrains.kotlin</groupId>
			<artifactId>kotlin-reflect</artifactId>
			<version>${version.kotlin}</version>
		</dependency>


		<!-- SpringBoot and Cloud BOMs -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-parent</artifactId>
			<version>${version.springboot}</version>
			<type>pom</type>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-dependencies</artifactId>
			<version>${version.springcloud}</version>
			<type>pom</type>
		</dependency>


		<!-- SpringFox for Swagger -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>${version.springfox}</version>
		</dependency>

		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>${version.springfox}</version>
		</dependency>

		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-spring-web</artifactId>
			<version>${version.springfox}</version>
		</dependency>

		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-jsr310</artifactId>
			<version>${version.jackson}</version>
		</dependency>



		<!-- test -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
		</dependency>
		<dependency>
			<groupId>io.rest-assured</groupId>
			<artifactId>rest-assured</artifactId>
		</dependency>
		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-client</artifactId>
			<version>${version.resteasy}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<!--TODO Check dependencies-->


		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-amqp</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-redis</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-hateoas</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-websocket</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
			<version>${version.spring-cloud-starter-netflix-hystrix}</version>
		</dependency>


		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${version.springcloud}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	<build>
		<sourceDirectory>src/main/kotlin</sourceDirectory>
		<testSourceDirectory>src/test/kotlin</testSourceDirectory>

		<plugins>
			<!--
                If you have modules with both Kotlin and Java code, the documentation states
                that it is important that the Kotlin compiler plugin is executed before the Java compiler.
                See https://kotlinlang.org/docs/kotlin-docs.pdf

                However, here we are not in such case. There is one exception though.
                In some modules (eg SOAP) we do automatically generate Java source code before
                the compilation phase.
                To make it usable from Kotlin, we need to compile such Java code before the
                Kotlin one. Note: that Java code does not call any Kotlin code.
                Therefore, here we force the execution of the Java compiler BEFORE
                the one of Kotlin.
              -->

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
			</plugin>

			<plugin>
				<artifactId>kotlin-maven-plugin</artifactId>
				<groupId>org.jetbrains.kotlin</groupId>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${version.jacoco}</version>
			</plugin>
		</plugins>

		<pluginManagement>
			<plugins>
				<!--For generating code coverage-->
				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<executions>
						<execution>
							<id>default-prepare-agent</id>
							<goals>
								<goal>prepare-agent</goal>
							</goals>
						</execution>
						<execution>
							<id>default-report</id>
							<phase>prepare-package</phase>
							<goals>
								<goal>report</goal>
							</goals>
						</execution>
						<execution>
							<id>default-prepare-agent-integration</id>
							<phase>package</phase>
							<goals>
								<goal>prepare-agent-integration</goal>
							</goals>
						</execution>
						<execution>
							<id>default-report-integration</id>
							<goals>
								<goal>report-integration</goal>
							</goals>
						</execution>
					</executions>
				</plugin>


				<plugin>
					<!-- see https://kotlinlang.org/docs/reference/using-maven.html -->
					<artifactId>kotlin-maven-plugin</artifactId>
					<groupId>org.jetbrains.kotlin</groupId>
					<version>${version.kotlin}</version>
					<!--
                        Kotlin has a major "limitation" that all classes are final by default.
                        Someone call it a "feature", others (like me) call it a "design flaw".
                        See more at: https://discuss.kotlinlang.org/t/classes-final-by-default/166/77


                        Why is it a problem? for example, it does not play well with all major frameworks
                        out there like JPA, Spring, mocking, etc, as they require to create proxy
                        classes that extend the classes you write.
                        So here we have to use special plugins to bypass this Kotlin "feature"...
                    -->
					<configuration>
						<jvmTarget>${version.java}</jvmTarget>
						<compilerPlugins>
							<plugin>spring</plugin>
							<plugin>jpa</plugin>
						</compilerPlugins>
					</configuration>
					<dependencies>
						<dependency>
							<groupId>org.jetbrains.kotlin</groupId>
							<artifactId>kotlin-maven-allopen</artifactId>
							<version>${version.kotlin}</version>
						</dependency>
						<dependency>
							<groupId>org.jetbrains.kotlin</groupId>
							<artifactId>kotlin-maven-noarg</artifactId>
							<version>${version.kotlin}</version>
						</dependency>
					</dependencies>
					<executions>
						<execution>
							<id>compile</id>
							<goals>
								<goal>compile</goal>
							</goals>
							<configuration>
								<sourceDirs>
									<sourceDir>${project.basedir}/src/main/kotlin</sourceDir>
									<sourceDir>${project.basedir}/src/main/java</sourceDir>
								</sourceDirs>
							</configuration>
						</execution>
						<execution>
							<id>test-compile</id>
							<goals>
								<goal>test-compile</goal>
							</goals>
							<configuration>
								<sourceDirs>
									<sourceDir>${project.basedir}/src/test/kotlin</sourceDir>
									<sourceDir>${project.basedir}/src/test/java</sourceDir>
								</sourceDirs>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<executions>
						<!-- Replacing default-compile as it is treated specially by maven -->
						<execution>
							<id>default-compile</id>
							<phase>none</phase>
						</execution>
						<!-- Replacing default-testCompile as it is treated specially by maven -->
						<execution>
							<id>default-testCompile</id>
							<phase>none</phase>
						</execution>
						<execution>
							<id>java-compile</id>
							<phase>compile</phase>
							<goals>
								<goal>compile</goal>
							</goals>
						</execution>
						<execution>
							<id>java-test-compile</id>
							<phase>test-compile</phase>
							<goals>
								<goal>testCompile</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<!-- Need to create self-executable uber/fat jars -->
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
					<version>${version.springboot}</version>
					<executions>
						<execution>
							<goals>
								<goal>repackage</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<!-- Needed for SOAP clients -->
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>jaxws-maven-plugin</artifactId>
					<version>2.5</version>
				</plugin>
				<plugin>
					<!-- For manual handling of generated resources -->
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>build-helper-maven-plugin</artifactId>
					<version>3.0.0</version>
				</plugin>

				<!--
                 Used to call NPM and other JS tools directly from Maven.
               -->
				<plugin>
					<groupId>com.github.eirslett</groupId>
					<artifactId>frontend-maven-plugin</artifactId>
					<version>1.6</version>
					<executions>
						<!--
                            Make sure that NPM/Node get installed
                        -->
						<execution>
							<id>install node and npm</id>
							<goals>
								<goal>install-node-and-npm</goal>
							</goals>
						</execution>
						<!--
                            Make sure to call following:
                            npm install
                            npm run build
                        -->
						<execution>
							<id>npm install</id>
							<goals>
								<goal>npm</goal>
							</goals>
							<configuration>
								<arguments>install</arguments>
							</configuration>
							<phase>generate-resources</phase>
						</execution>
						<execution>
							<id>npm run build</id>
							<goals>
								<goal>npm</goal>
							</goals>
							<configuration>
								<arguments>run build</arguments>
							</configuration>
							<phase>generate-resources</phase>
						</execution>
						<!--
                            when running "mvn test", make sure to
                            also call "npm test"
                        -->
						<execution>
							<id>npm test</id>
							<goals>
								<goal>npm</goal>
							</goals>
							<configuration>
								<arguments>test</arguments>
							</configuration>
							<phase>test</phase>
						</execution>
					</executions>
					<configuration>
						<nodeVersion>v6.9.5</nodeVersion>
					</configuration>
				</plugin>

			</plugins>

		</pluginManagement>
	</build>

</project>
