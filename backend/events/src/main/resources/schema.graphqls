type Query {
    version: String,
    allEvents: [Event],
    allEventsForVenue:[Event],
    allEventsForMovies:[Event],
#       eventById:Event
}
type Mutation {
    create(
    event: EventInput!
): String!
#    update(event:EventInput!): Boolean!
}

scalar EventDateTime

input EventInput {
    data: EventDateTime!,
    movieId: Long,
    venueId: Long,
    roomId: Long,
    rows: Int,
    columns: Int
}

type Event {
    id: Long,
    date: EventDateTime!,
    movieId: Movie,
    venueId: Venue,
    roomId: Room,
    rows: Int,
    columns: Int
}
type Room{
    id: String,
    name: String,
    rows: Int,
    columns: Int
}

type Venue{
    id: String,
    geoLocation: String,
    address: String,
    rooms: [Room],
    name: String
}
type Movie {
    title: String,
    poster: String,
    coverArt: String,
    trailer: String,
    overview: String,
    releaseDate: String,
    genres: [String],
    voteCount: Int,
    voteAverage: String,
    popularity: String,
    price: String,
    id: String
}

